* README - OS install
https://opensource.com/article/19/5/python-3-default-mac
pip install 'python-language-server[all]'
pip install "ptvsd>=4.2"

https://github.com/theia-ide/typescript-language-server
npm install -g typescript-language-server
* Functions
#+BEGIN_SRC emacs-lisp
  ;; (defun gds/monitor-max-size-mm (&optional frame)
  ;;   "Return the max mm dimension for monitor showing FRAME."
  ;;   (apply 'min (cdr (assoc 'mm-size (frame-monitor-attributes frame)))))
  ;; 
  ;; (defun gds/monitor-max-size-px (&optional frame)
  ;;   "Return the max px dimension for monitor showing FRAME."
  ;;   (apply 'min (cdddr (assoc 'geometry (frame-monitor-attributes frame)))))
  ;; 
  ;; (defun gds/pixel-pitch (&optional frame)
  ;;   "Calculate the pixel pitch for FRAME (default current frame)."
  ;;   ;; On a rotated monitor, px geom is rotated but size is not, so use
  ;;   ;; max dimension of each.
  ;;   (let* ((monitor-attrs (frame-monitor-attributes frame)))
  ;;     (/ (float (gds/monitor-max-size-mm frame))
  ;;        (float (gds/monitor-max-size-px frame)))))
  ;; 
  ;; (defun gds/adjust-font (&optional frame)
  ;;   (setq gds/pitch (gds/pixel-pitch))
  ;;   ; MacbookPro 13" 2017  0.19888 =>  96
  ;;   ; Dell U2415           0.26979 => 131
  ;;   (setq gds/calculated-size (+ 70 (round (/ 15.0 gds/pitch))))
  ;;   (set-face-attribute 'default (selected-frame) :height gds/calculated-size)
  ;; )

  ;; Font size adjustment
  ;; For decent rendering point size should be a multiple of 3 (?)
  (defun gds/adjust-font (&optional frame)
    "See also https://emacs.stackexchange.com/a/44930/17066. FRAME is ignored."
    (setq gds/font-size 120)
    (setq gds/monitor 'None)
    (setq gds/monitor-attr          (frame-monitor-attributes))
    (setq gds/monitor-size-mm  (cdr (assoc 'mm-size gds/monitor-attr)))
    (setq gds/monitor-width-mm (nth 1 gds/monitor-size-mm))
    (when (eq gds/monitor-width-mm '179) ;; MacbookPro -> Retina
      (setq gds/monitor 'MacbookPro->Retina)
      (setq gds/font-size 129))
    (when (eq gds/monitor-width-mm '238) ;; MacbookPro -> Retina -> RDC
      (setq gds/monitor 'MacbookPro->Retina->RDC)
      (setq gds/font-size 100))
    (when (eq gds/monitor-width-mm '334) ;; MacbookPro -> Dell-SE2719H
      (setq gds/monitor 'MacbookPro->Dell-SE2719H)
      (setq gds/font-size 120))
    (when (eq gds/monitor-width-mm '286) ;; MacbookPro -> Dell-SE2719H -> RDC
      (setq gds/monitor 'MacbookPro->Dell-SE2719H->via-RDC)
      (setq gds/font-size 90))
    (when (eq gds/monitor-width-mm '324) ;; PC -> Dell-U2415
      (setq gds/monitor 'PC->Dell-U2415)
      (setq gds/font-size 90))
    (when (eq gds/monitor-width-mm '318) ;; PC -> WLS -> Dell-U2415
      (setq gds/monitor 'PC->WLS->Dell-SE2719H->via-RDC)
      (setq gds/font-size 90))
    (set-face-attribute 'default (selected-frame) :height gds/font-size)
    )
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp

;; FIXME: Disabled, because it causes incorrect load of spacemacs-light theme
(use-package zenburn-theme :defer t)
(use-package doom-themes :defer t)
(use-package spacemacs-theme :defer t
  :config
  (load-theme 'spacemacs-light t)
  (gds/adjust-font))
  (add-hook 'window-size-change-functions #'gds/adjust-font)
#+END_SRC

* Init
#+BEGIN_SRC emacs-lisp

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq user-cache-directory "~/.emacs.d/.cache/")

;; Advanced settings
(desktop-save-mode t)     ;auto save/load session,window-size

(setq-default truncate-lines t) ;do not wrap lines

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)

;; Highlight current line
(global-hl-line-mode t)

;; Never insert tabs
(setq-default indent-tabs-mode nil)

;FIXME
;; PATH
;; https://emacs.stackexchange.com/questions/550/exec-path-and-path
;(if (eq system-type 'darwin)
;  ; windows-nt cygwin
;; https://github.com/abo-abo/swiper/issues/844
(when (eq system-type 'darwin)
  ; windows-nt cygwin
  (add-to-list 'exec-path "/usr/local/bin/")
  (add-to-list 'exec-path "/usr/local/opt/llvm/bin/")
  (setq-default counsel-rg-base-command "/usr/local/Cellar/ripgrep/11.0.2/bin/rg -M 120 --with-filename --no-heading --line-number --color never %s"))

#+END_SRC

* Keys -> Misc
#+BEGIN_SRC emacs-lisp
;; Minimize mode-line
(use-package diminish
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 
    (lambda()
      (setq mode-name "")))  
  (with-eval-after-load 'undo-tree
    (diminish 'undo-tree-mode "")) 
  (diminish 'eldoc-mode "")
  )

;; Vim mode
(use-package evil
  :ensure t
  :config
  (evil-mode t)
)

;; Which Key
(use-package which-key
  :ensure t
  :init
  (which-key-mode t)
  :config
  (which-key-setup-side-window-bottom)
  (setq
    which-key-sort-order 'which-key-key-order
    ;which-key-sort-order 'which-key-key-order-alpha
    which-key-side-window-max-width 0.33
    which-key-separator " "
    which-key-prefix-prefix "+"
    which-key-show-early-on-C-h t ;; C-h before it is done automatically
    which-key-idle-delay 1
    which-key-idle-secondary-delay 0.05)
    ;; (add-to-list 'which-key-replacement-alist '(("TAB" . nil) . ("↹" . nil))
    ;; (add-to-list 'which-key-replacement-alist '(("RET" . nil) . ("⏎" . nil))
    ;; (add-to-list 'which-key-replacement-alist '(("DEL" . nil) . ("⇤" . nil))
    ;; (add-to-list 'which-key-replacement-alist '(("SPC" . nil) . ("␣" . nil))
   (which-key-mode)

  :diminish (which-key-mode . ""))
#+END_SRC

* Keys -> Windows
#+BEGIN_SRC emacs-lisp

(use-package winum
  :ensure t
  :config
  (setq window-numbering-scope            'local
        winum-reverse-frame-list          nil
        winum-auto-assign-0-to-minibuffer t
        ;winum-assign-func                 'my-winum-assign-func
        winum-auto-setup-mode-line        t
        ;winum-format                      " %s "
        winum-mode-line-position          1
        winum-ignored-buffers             '(" *which-key*")
        winum-ignored-buffers-regexp      '(" \\*Treemacs-.*"))
  (winum-mode t)
)
#+END_SRC

* Keys -> MacOS
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'control)
#+END_SRC

* Keys -> SPC leader
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    (general-define-key
     :keymaps '(normal visual)
     :prefix "SPC"
     :non-normal-prefix "C-SPC"
     "SPC" '(counsel-M-x :which-key "M-x")

     "TAB" 'eyebrowse-last-window-config
     "lc" '(eyebrowse-create-window-config    :which-key "Create Layout ")
     "ld" '(eyebrowse-close-window-config     :which-key "Delete Layout ")
     "ll" '(eyebrowse-last-window-config      :which-key "Last Layout ")
     "ln" '(eyebrowse-next-window-config      :which-key "Next Layout ")
     "lp" '(eyebrowse-prev-window-config      :which-key "Prev Layout ")
     "l." '(eyebrowse-switch-to-window-config :which-key "Select Layout...")

     "l0" 'eyebrowse-switch-to-window-config-0
     "l1" 'eyebrowse-switch-to-window-config-1
     "l2" 'eyebrowse-switch-to-window-config-2
     "l3" 'eyebrowse-switch-to-window-config-3
     "l4" 'eyebrowse-switch-to-window-config-4
     "l5" 'eyebrowse-switch-to-window-config-5
     "l6" 'eyebrowse-switch-to-window-config-6
     "l7" 'eyebrowse-switch-to-window-config-7
     "l8" 'eyebrowse-switch-to-window-config-8
     "l9" 'eyebrowse-switch-to-window-config-9

     "b"  '(:ignore t :which-key "buffer")
     "bb" 'counsel-projectile-switch-to-buffer
     "bB" 'counsel-switch-buffer
     "bi" 'ivy-switch-buffer
     ;; "bf" 'lsp-format-buffer
     "bd" 'kill-current-buffer
     "bD" 'projectile-kill-buffers
     "br" 'revert-buffer
     "bs" 'save-buffer

     "c"  '(:ignore t :which-key "code")
     "cc" 'evilnc-comment-operator
     "cl" 'evilnc-comment-or-uncomment-lines
     "cx" 'evilnc-comment-and-kill-ring-save
     "cy" 'evilnc-copy-and-comment-lines
     "cp" 'evilnc-comment-or-uncomment-paragraphs
     "cr" 'comment-or-uncomment-region


     ;; ";" '(evilnc-comment-or-uncomment-line :which-key "comment")

     ;; ";i" 'evilnc-comment-or-uncomment-lines
     ;; ";l" 'evilnc-quick-comment-or-uncomment-to-the-line
     ;; ";l" 'evilnc-quick-comment-or-uncomment-to-the-line
     ;; ";c" 'evilnc-copy-and-comment-lines
     ;; ";p" 'evilnc-comment-or-uncomment-paragraphs
     ;; ";r" 'comment-or-uncomment-region
     ;; ";v" 'evilnc-toggle-invert-comment-line-by-line
     ;; "."  'evilnc-copy-and-comment-operator
     ;; ";" 'evilnc-comment-operator


     "e"  '(:ignore t :which-key "edit/eval/error")
     "eb" 'eval-buffer
     "ef" 'eval-defun
     "er" 'eval-region
     "ee" 'eval-last-sexp
     "el" '(flycheck-list-errors :which-key "Error list")
     "em" '(mc/edit-lines :which-key "Multi-cursor")
     "ep" 'eval-print-last-sexp


     "f"  '(:ignore t :which-key "file")
     "ff" 'counsel-projectile-find-file
     "fg" '(counsel-git :which-key "find in git dir")
     ;"fF" 'find-file-under-here
     "fd" 'deer
     "fr" 'counsel-recentf

     "g"  '(:ignore t :which-key "git")
     "gg" '(magit-status      :which-key "Git status")
     "gl" '(magit-file-log    :which-key "Git log")
     "gt" '(git-timemachine   :which-key "Git time-machine")

     "h"  '(:ignore t :which-key "help")
     "he" 'view-echo-area-messages
     ;; "hh" 'lsp-describe-thing-at-point
     "hl" 'view-lossage
     "hc" 'describe-coding-system
     "hI" 'describe-input-method
     "hb" 'describe-bindings
     "hk" 'describe-key
     "hw" 'where-is
     "hf" 'counsel-describe-function
     "hp" 'describe-package
     "hm" 'describe-mode
     "hv" 'counsel-describe-variable
     "hy" 'describe-syntax
     "ha" 'apropos-command
     "hd" 'apropos-documentation
     "hs" 'info-lookup-symbol

     ;; temp
     ;; "ll" 'lsp-describe-thing-at-point
     ;; "lf" 'lsp-format-buffer

     "p"  '(:ignore t :which-key "project")
     "pd" 'counsel-projectile-find-dir
     "pp" 'counsel-projectile-switch-project
     "pf" 'counsel-projectile-find-file
     "pg" 'counsel-projectile-grep

     "q"  '(:ignore t :which-key "quit")
     "qq" 'save-buffers-kill-terminal

     "s"  '(:ignore t :which-key "search")
     "ss" 'swiper-isearch
     "sS" 'swiper-isearch-thing-at-point
     "*"  'swiper-isearch-thing-at-point
     "sf" 'counsel-projectile-rg
     "sg" 'counsel-projectile-git-grep
     "sd" 'lsp-find-type-definition
     "sr" 'lsp-find-reference

     "t"  '(:ignore t :which-key "tweak/toggle/theme")
     "tw" 'toggle-truncate-lines
     "tl" 'display-line-numbers-mode
     "tf" 'flycheck-mode
     ;; "tt"  '(:ignore t :which-key "tweak")
     ;; "ttt" 'counsel-load-theme
     "tt" '(theme-looper-enable-next-theme :which-key "Theme toggle")
     "tl" '(counsel-load-theme             :which-key "Theme list")

     "w"  '(:ignore t :which-key "window")
     "wd" 'evil-window-delete
     "wr" 'evil-window-rotate-upwards
     "wR" 'evil-window-rotate-downwards
     "ww" 'evil-next-window
     "w/" 'split-window-right
     "w-" 'split-window-below

     "x"  '(:ignore t :which-key "x-files")
     "xeb" 'eval-buffer
     "xer" 'eval-region
     "xee" 'eval-last-sexp
     "xt" 'ansi-term

     "TT" 'treemacs
     "TB" 'treemacs-bookmark
     "TF" 'treemacs-find-file
     "TG" 'treemacs-find-tag
     "TD" 'treemacs-delete-other-windows

     "0"  'treemacs-select-window
     "1"  'winum-select-window-1
     "2"  'winum-select-window-2
     "3"  'winum-select-window-3
     "4"  'winum-select-window-4
     "5"  'winum-select-window-5
     "6"  'winum-select-window-6
     "7"  'winum-select-window-7
     "8"  'winum-select-window-8
     "9"  'winum-select-window-9

     "t1" 'evil-snipe-s 

    ;  ;"a" 'align-regexp
    ;  ;"ar" '(ranger :which-key "call ranger")
    ;  ;"g"  '(:ignore t :which-key "Git")
    ;  ;"gs" '(magit-status :which-key "git status")
  ; ;; bind to simple key press
  ;  "b"	'ivy-switch-buffer  ; change buffer, chose using ivy
  ;  "/"   'counsel-git-grep   ; find string in git project
  ;  ;; bind to double key press
  ;  "f"   '(:ignore t :which-key "files")
  ;  "p"   '(:ignore t :which-key "project")
  ;  "pf"  '(counsel-git :which-key "find file in git dir")
  ;   ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
  ;   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
  ;   "SPC" '(helm-M-x :which-key "M-x")
  ;   "pf"  '(helm-find-file :which-key "find files")
  ;   ;; Buffers
  ;   "bb"  '(helm-buffers-list :which-key "buffers list")
  ;   ;; Window
  ;   "wl"  '(windmove-right :which-key "move right")
  ;   "wh"  '(windmove-left :which-key "move left")
  ;   "wk"  '(windmove-up :which-key "move up")
  ;   "wj"  '(windmove-down :which-key "move bottom")
  ;   "w/"  '(split-window-right :which-key "split right")
  ;   "w-"  '(split-window-below :which-key "split bottom")
  ;   "wx"  '(delete-window :which-key "delete window")
  ;   ;; Others
  ;   "at"  '(ansi-term :which-key "open terminal")
     )

     ;; https://emacs.stackexchange.com/questions/36658/how-to-group-key-bindings-in-which-key
     (push '(("\\(.*\\) 1" . "winum-select-window-1") . ("\\1 1..9" . "window 1..9"))
        which-key-replacement-alist)
     (push '((nil . "winum-select-window-[2-9]") . t) which-key-replacement-alist)

     (push '(("\\(.*\\) 0" . "eyebrowse-switch-to-window-config-0") . ("\\1 0..9" . "layout 0..9"))
        which-key-replacement-alist)
     (push '((nil . "eyebrowse-switch-to-window-config-[1-9]") . t) which-key-replacement-alist)

     (general-define-key
     :keymaps '(normal insert emacs)
     :prefix "SPC"
     :non-normal-prefix "C-SPC"
     "/" 'swiper
      ; "l" '(avy-goto-line)
      ; "a" 'align-regexp
     )
#+END_SRC

* Keys -> Global
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

  (with-eval-after-load 'org
    (define-key org-mode-map [(control tab)] nil)))

  (general-define-key
    :keymaps 'flycheck-mode-map
    ;"C-n"     'flycheck-next-error
    ;"C-p"     'flycheck-previous-error
    "C-n"     'flycheck-tip-cycle
    "C-p"     'flycheck-tip-cycle-reverse
  )


  (general-define-key
    "C-s"     'save-buffer
    "C-S-s"   'save-some-buffers
    "C-j"     'switch-to-prev-buffer
    "C-k"     'switch-to-next-buffer
    "C--"     'text-scale-decrease
    "C-="     'text-scale-increase
    ;;"C-;"     'evilnc-comment-or-uncomment-lines
    "C-<tab>" 'gds/alternate-buffer
    "<f5>"    'theme-looper-enable-next-theme
    "<f6>"    'gds/adjust-font
 )


;  (general-define-key
;  "C-'" 'avy-goto-word-1
;  ;"C-s" 'swiper             ; search for string in current buffer
;  ;"M-x" 'counsel-M-x        ; replace default M-x with ivy backend
;  )

#+END_SRC

* Keys -> Escape
#+BEGIN_SRC emacs-lisp
  ;; https://stackoverflow.com/questions/8483182/evil-mode-best-practice
  ;; Will break macro recording when attempting to switch back to normal mode using ESC.
  ;; It might make sense to rebind that action to another key
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  ;;; esc quits
  ;;(defun minibuffer-keyboard-quit ()
  ;;   "Abort recursive edit.
  ;; In Delete Selection mode, if the mark is active, just deactivate it;
  ;; then it takes a second \\[keyboard-quit] to abort the minibuffer."
  ;;   (interactive)
  ;;   (if (and delete-selection-mode transient-mark-mode mark-active)
  ;;       (setq deactivate-mark  t)
  ;;     (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
  ;;     (abort-recursive-edit)))
  ;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
  ;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
  ;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

* Keys -> jk
#+BEGIN_SRC emacs-lisp
(general-imap "j"
              (general-key-dispatch 'self-insert-command
                :timeout 0.20
                "k" 'evil-normal-state))
#+END_SRC

* UI -> Title
#+BEGIN_SRC emacs-lisp
(setq frame-title-format '(:eval
   (let ((project-name (projectile-project-name)))
   (if (string= "-" project-name)
       (format "%s" "%b")
       (format "%s" project-name)))))
#+END_SRC

* UI -> Controls
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
#+END_SRC

* UI -> MacOS: Fancy titlebar
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
;; (setq ns-use-proxy-icon  nil)
#+END_SRC

* UI -> Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 1)
  ;; (set-face-attribute 'mode-line nil :family "Arial Narrow" :height 70)
  ;; (set-face-attribute 'mode-line-inactive nil :family "Arial Narrow" :height 70)
)
#+END_SRC

* UI -> Theme toggle
#+BEGIN_SRC emacs-lisp
(use-package theme-looper
 :ensure t
 :init
 :config
 (theme-looper-set-favorite-themes '(zenburn spacemacs-light))
 ;(theme-looper t)
)
#+END_SRC

* UI -> Tree
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'right
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          ;treemacs-width                         35
      )

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)
    (treemacs-resize-icons 11)
    
    (treemacs-git-mode 'extended)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)

    ;; (pcase (cons (not (null (executable-find "git")))
    ;;              (not (null treemacs-python-executable)))
    ;;   (`(t . t)
    ;;    (treemacs-git-mode 'deferred))
    ;;   (`(t . _)
    ;;    (treemacs-git-mode 'simple)))
  )

  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
)

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

;; (use-package treemacs-persp
;;   :after treemacs persp-mode
;;   :ensure t
;;   :config (treemacs-set-scope-type 'Perspectives))

#+END_SRC

* UI -> Font Auto Zoom
#+BEGIN_SRC emacs-lisp
;; https://emacs.stackexchange.com/questions/28390/quickly-adjusting-text-to-dpi-changes
(defun my-dpi (&optional frame)
  "Get the DPI of FRAME (or current if nil)."
  (cl-flet ((pyth (lambda (w h)
                    (sqrt (+ (* w w)
                             (* h h)))))
            (mm2in (lambda (mm)
                     (/ mm 25.4))))
    (let* ((atts (frame-monitor-attributes frame))
           (pix-w (cl-fourth (assoc 'geometry atts)))
           (pix-h (cl-fifth (assoc 'geometry atts)))
           (pix-d (pyth pix-w pix-h))
           (mm-w (cl-second (assoc 'mm-size atts)))
           (mm-h (cl-third (assoc 'mm-size atts)))
           (mm-d (pyth mm-w mm-h)))
      (/ pix-d (mm2in mm-d)))))

(defvar my-zoom-frm-wanted-dpi 70
  "The DPI I want to achieve when using `my-zoom-frm-by-dpi'.")

(defun my-zoom-frm-by-dpi (&optional frame)
  "Zoom FRAME so the DPI is closer to `my-zoom-frm-wanted-dpi'."
  (interactive)
  (let ((frame (or frame (selected-frame))))
    (when (frame-parameter frame 'zoomed)
      (zoom-frm-unzoom frame))
    (let ((frame-zoom-font-difference (1- (round (/ (my-dpi frame)
                                                    my-zoom-frm-wanted-dpi)))))
      (when (called-interactively-p 'interactive)
        (message "Zooming by %S" frame-zoom-font-difference))
      (zoom-frm-in frame))))

;; Apply the scaling I want to each newly created frame:
(add-hook 'after-make-frame-functions #'my-zoom-frm-by-dpi)
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
;; Ivy
(use-package ivy
  :ensure t
  :config
  (ivy-mode t)
  (setq 
    ;ivy-use-virtual-buffers nil ; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’
    ivy-use-virtual-buffers t
    ivy-height 7                 ; number of result lines to display
    ivy-count-format "%d/%d "    ; count candidates
    ivy-initial-inputs-alist nil ; no regexp by default
    ivy-re-builders-alist        ; configure regexp engine.
        '((t   . ivy--regex-ignore-order));; allow input not in order
    ivy-display-style 'fancy
   ) 
  :diminish (ivy-mode . ""))

(use-package smex
)

(use-package counsel
  :ensure t
  :config
  (counsel-mode t)
  :diminish (counsel-mode . "")
)

;; Ranger (test)
(use-package ranger
  :ensure t
  :commands (ranger)
  :bind (("C-x d" . deer))
  :config
  (setq ranger-cleanup-eagerly t) ; kill the buffer just after you move to another entry in the dired buffer.
  )

;(use-package avy :ensure t
;  :commands (avy-goto-word-1))

#+END_SRC

* A la sane defaults
#+BEGIN_SRC emacs-lisp
(setq version-control t)             ; use version control
(setq vc-follow-symlinks t)          ; don't ask for confirmation when opening symlinked file
(setq inhibit-startup-screen t)      ; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore)    ; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8) ; use utf-8 by default
(setq coding-system-for-write 'utf-8)
(setq sentence-end-double-space nil) ; sentence SHOULD end with only a point.
(setq default-fill-column 80)        ; toggle wrapping text at the 80th character
(setq initial-scratch-message "")    ; print a default message in the empty scratch buffer opened at startup
#+END_SRC

* Autosave/Backups
#+BEGIN_SRC emacs-lisp
;; stop creating those #auto-save# files
(setq auto-save-default nil)
;(setq auto-save-file-name-transforms '((".*" "~/.emacs.local/auto-save-list/" t)) ) ;transform backups file name

(setq make-backup-files nil)     ; disable backups
;(setq backup-directory-alist `(("." . "~/.emacs.local/backups")))
;(setq backup-by-copying t)             ; can be slow
;(setq backup-by-copying-when-linked t) ; can be slow?
;(setq delete-old-versions t
;  kept-new-versions 6
;  kept-old-versions 2
;  version-control t)
;;(setq delete-old-versions -1 )   ; delete excess backup versions silently
;;(setq vc-make-backup-files t )   ; make backups file even when in version controlled dir
#+END_SRC

* Buffer auto-refresh
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t) ;(e.g. dired)
#+END_SRC

* Buffers
#+BEGIN_SRC emacs-lisp
;https://emacs.stackexchange.com/questions/44697/how-to-skip-some-buffers-when-use-prev-buffer-next-buffer
(defun my-buffer-predicate (buffer)
  (if (string-match "Messages" (buffer-name buffer)) nil t)
  (if (string-match "Straight-process" (buffer-name buffer)) nil t))
(set-frame-parameter nil 'buffer-predicate 'my-buffer-predicate)

(defun gds/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (cl-destructuring-bind (buf start pos)
    (or (cl-find (window-buffer window) (window-prev-buffers)
                     :key #'car :test-not #'eq)
           (list (other-buffer) nil nil))
    (if (not buf)
        (message "Last buffer not found.")
      (set-window-buffer-start-and-point window buf start pos))))

#+END_SRC

* Copy/Paste clipboard emacs-lisp
(setq select-enable-primary t)
(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
;; https://www.reddit.com/r/emacs/comments/5n9t3f/copypaste_from_system_clipboard_on_windows/
#+END_SRC

* Terminal (fails)
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
 :init
 (setq projectile-require-project-root nil) ;any folder as prj
 :config
 (if (eq system-type 'windows-nt)
   (setq projectile-project-search-path '("d:/dev/repo")
   (setq projectile-project-search-path '("~/dev/repo"))
)
 )
 (projectile-mode t))

(use-package counsel-projectile
 :init
 :config
 (counsel-projectile-mode t))
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-diff-options (quote ("--word-diff")))
  (setq magit-diff-refine-hunk 'all)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  ;(setq projectile-switch-project-action 'magit-status) ;;?

  (use-package evil-magit
    :config
    (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
    (setq magit-status-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

    ;; Default commit editor opening in insert mode
    (add-hook 'with-editor-mode-hook 'evil-insert-state)

    (evil-define-key 'normal with-editor-mode-map
      (kbd "RET") 'with-editor-finish
      [escape] 'with-editor-cancel
      )
    (evil-define-key 'normal git-rebase-mode-map
      "l" 'git-rebase-show-commit
      )
    )
  )

(use-package git-timemachine)

#+END_SRC

* Commenting
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
 :config
 (setq comment-empty-lines t))
#+END_SRC

* Syntax -> Check Errors
#+BEGIN_SRC emacs-lisp
   ;; ;; https://emacs.stackexchange.com/questions/46001/configuring-flycheck-to-use-a-local-eslint/46586
   ;; (defun configure-web-mode-flycheck-checkers ()
   ;; ;; in order to have flycheck enabled in web-mode, add an entry to this
   ;; ;; cond that matches the web-mode engine/content-type/etc and returns the
   ;; ;; appropriate checker.
   ;; (-when-let (checker (cond
   ;;                     ((string= web-mode-content-type "jsx")
   ;;                         'javascript-eslint)))
   ;;     (flycheck-mode)
   ;;     ;; use the locally installed eslint
   ;;     (let* ((root (locate-dominating-file
   ;;                 (or (buffer-file-name) default-directory)
   ;;                 "node_modules"))
   ;;         (eslint (and root
   ;;                         (expand-file-name "node_modules/.bin/eslint"
   ;;                                         root))))
   ;;     (when (and eslint (file-executable-p eslint))
   ;;         (setq-local flycheck-javascript-eslint-executable eslint)))
   ;; 
   ;;     (flycheck-select-checker checker)))

  (use-package flycheck
    :config 
    (global-flycheck-mode)
    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    ;(setq flycheck-display-errors-delay 0.5)
    ;(setq-default flycheck-temp-prefix ".")
    ;; (flycheck-add-mode 'javascript-eslint 'web-mode)
    ;; (add-hook 'web-mode-hook #'configure-web-mode-flycheck-checkers)

    ;; To avoid echoing error message on minibuffer (optional)
    ;; (setq flycheck-display-errors-function 'ignore)

    (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++2a")))
  )
  (use-package flycheck-tip)
  ; (use-package flycheck-inline
  ;; :config
  ;;   (global-flycheck-inline-mode)
  ;; )

#+END_SRC

* Syntax -> Navigation
#+BEGIN_SRC emacs-lisp
  ;; TEST test-super-word-a - if-it-is-working+5=x
  ;; TEST test_super_word_a_ if_it_is_working _ok + 5=x
  ;; TEST testSubWord ifItIsWorking+5=x

  (superword-mode t)
  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (modify-syntax-entry ?_ "w")))

  ;; For python
  ;(add-hook 'python-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
  ;; For ruby
  ;(add-hook 'ruby-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
  ;; For Javascript
  ;(add-hook 'js2-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC

* Javasript
  https://justin.abrah.ms/dotfiles/emacs.html
#+BEGIN_SRC emacs-lisp
;; (use-package js2-mode
;;   :mode ("\\.js" . js2-mode)
;;   ;:init
;;   ;(setq js2-global-externs '("it" "afterEach" "beforeEach" "before" "after" "describe" "require" "module"))
;; 
;;   ;; Turn off js2 mode errors & warnings (we lean on eslint/standard)
;;   :config
;;   (setq js2-mode-show-parse-errors nil)
;;   (setq js2-mode-show-strict-warnings nil)
;;   ;(setq-default js2-basic-offset 2)
;;   ;(setq js-indent-level 2)
;;   ;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;   ;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
;;   ;(add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
;;   )
 
(use-package json-mode
  :mode ("\\.json" . json-mode))

(defun js-mode-use-eslint-indent ()
  (let ((json-object-type 'hash-table)
    (json-config (shell-command-to-string (format  "eslint --print-config %s"
                               (shell-quote-argument
                            (buffer-file-name))))))
    (ignore-errors
      (setq js-indent-level
        (aref (gethash "indent" (gethash  "rules" (json-read-from-string json-config))) 1)))))

(add-hook 'js-mode-hook #'js-mode-use-eslint-indent)
#+END_SRC

* Links
https://github.com/sho-87/dotfiles/blob/master/emacs/init.el

* Mouse
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed t)
#+END_SRC

* Persistent Scratch
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :init
    (setq persistent-scratch-backup-directory (concat user-cache-directory "scratch-backups"))
    (setq persistent-scratch-save-file (concat user-cache-directory "persistent-scratch"))
    ;; keep backups not older than a month
    (setq persistent-scratch-autosave-interval 60)
    (setq persistent-scratch-backup-filter
      (persistent-scratch-keep-backups-not-older-than
       (days-to-time 90)))
    :config
    (ignore-errors (persistent-scratch-setup-default))
)
#+END_SRC

* Code Completion
#+BEGIN_SRC emacs-lisp
;; https://github.com/gjstein/emacs.d/tree/master/config
(use-package company
  ;:diminish company-mode
  :init
  ;;(add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-irony :ensure t :defer t)
  (setq company-idle-delay              0.1 
	company-minimum-prefix-length   1
	company-show-numbers            t
	company-tooltip-limit           20
	company-dabbrev-downcase        nil
	)
  ;:bind ("C-." . company-complete-common)
  (global-company-mode t)
)
#+END_SRC

* C++
#+BEGIN_SRC emacs-lisp
;; https://github.com/gjstein/emacs.d/tree/master/config
;; (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;; (defun my-c-company-hook ()
;;  "Company backends in C/C++."
;;  (set (make-local-variable 'company-backends)
;;       '(company-dabbrev-code company-irony company-gtags))
;;  )
;; (add-hook 'c-mode-hook 'my-c-company-hook)
;; (add-hook 'c++-mode-hook 'my-c-company-hook)
;; 
;; ;; == irony-mode ==
;; (use-package irony
;;   ;;  M-x irony-install-server
;;  :ensure t
;;  :defer t
;;  :diminish irony-mode
;;  :init
;;  (add-hook 'c++-mode-hook 'irony-mode)
;;  (add-hook 'c-mode-hook 'irony-mode)
;;  (add-hook 'objc-mode-hook 'irony-mode)
;;  :config
;;  ;; replace the `completion-at-point' and `complete-symbol' bindings in
;;  ;; irony-mode's buffers by irony-mode's function
;;  (defun my-irony-mode-hook ()
;;    (define-key irony-mode-map [remap completion-at-point]
;;      'irony-completion-at-point-async)
;;    (define-key irony-mode-map [remap complete-symbol]
;;      'irony-completion-at-point-async))
;;    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
;;    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
;; 
;; ;; === CMake ===
;; (use-package cmake-mode
;;   :ensure t
;;   :defer t
;;   :init
;;   ; Add cmake listfile names to the mode list.
;;   (setq auto-mode-alist
;; 	(append
;; 	 '(("CMakeLists\\.txt\\'" . cmake-mode))
;; 	 '(("\\.cmake\\'" . cmake-mode))
;; 	 auto-mode-alist))
;;   )

#+END_SRC

* Multi-edit - wgrep
#+BEGIN_SRC emacs-lisp
   (use-package wgrep
     :config 
     (setq wgrep-auto-save-buffer t     ; Auto save buffer on wgrep-finish-edit
           wgrep-enable-key "r"         ; Key to switch to wgrep
           wgrep-change-readonly-file t ; Apply changes regardless of whether or not buffer is read-only.
     )
   )
#+END_SRC

* Edit
#+BEGIN_SRC emacs-lisp
   (use-package iedit)
   (use-package multiple-cursors)
#+END_SRC

* LSP core
Mike Zamansky - Using Emacs Episode 58 - lsp-mode
https://www.youtube.com/watch?v=zg6JJI-kwhE&t=388s
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t
    :commands lsp
    :custom
    ;(lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    ;(lsp-file-watch-threshold 2000)
    ;(read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil)
    :hook ((python-mode
            js-mode
            ;; js2-mode web-mode
            c-mode c++-mode objc-mode) . lsp)
     :config
     (setq lsp-enable-symbol-highlight t)
    (setq lsp-keymap-prefix "C-c C-l")
    ;; (setq lsp-eslint-server-command 
    ;;    '("node" 
    ;;      "C:/Users/gds/.vscode/extensions/dbaeumer.vscode-eslint-2.1.5/server/out/eslintServer.js" 
    ;;      "--stdio"))
  )
 (use-package lsp-ui
   :ensure t)

  ;; ;; (use-package lsp-ui
  ;; ;;   :after lsp-mode
  ;; ;;   ;; :diminish
  ;; ;;   ;; :commands lsp-ui-mode
  ;; ;;   ;:custom-face
  ;; ;;   ;;(lsp-ui-doc-background ((t (:background nil))))
  ;; ;;   ;;(lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  ;; ;;   :bind (:map lsp-ui-mode-map
  ;; ;;               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
  ;; ;;               ([remap xref-find-references] . lsp-ui-peek-find-references)
  ;; ;;               ("C-c u" . lsp-ui-imenu)
  ;; ;;               ("M-i" . lsp-ui-doc-focus-frame))
  ;; ;;   :custom
  ;; ;;   (lsp-ui-doc-header t)
  ;; ;;   (lsp-ui-doc-include-signature t)
  ;; ;;   ;; (lsp-ui-doc-border (face-foreground 'default))
  ;; ;;   ;; (lsp-ui-sideline-enable nil)
  ;; ;;   ;; (lsp-ui-sideline-ignore-duplicate t)
  ;; ;;   ;; (lsp-ui-sideline-show-code-actions nil)
  ;; ;;   ;:config
  ;; ;; 
  ;; ;;   ;;gds
  ;; ;;   ;; ;; Use lsp-ui-doc-webkit only in GUI
  ;; ;;   ;; (if *sys/gui*
  ;; ;;   ;;     (setq lsp-ui-doc-use-webkit t))
  ;; ;; 
  ;; ;;   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; ;;   ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  ;; ;;   ;(defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
  ;; ;;   ;  (setq mode-line-format nil))
  ;; ;; 
  ;; ;;   (lsp-ui-doc-enable nil)
  ;; ;;   (lsp-ui-peek-enable nil)
  ;; ;;   (lsp-ui-sideline-enable nil)
  ;; ;;   (lsp-ui-imenu-enable nil)
  ;; ;;   (lsp-ui-flycheck-enable t)
  ;; ;; )

  ;; (use-package company-lsp
  ;;   :config
  ;;   (push 'company-lsp company-backends)
  ;; )
   
  (use-package lsp-treemacs 
    :config
    (lsp-treemacs-sync-mode 1)
  )

  ;; (use-package posframe 
  ;; )
  ;; 
  ;; (use-package dap-mode 
  ;; :config
  ;;   (dap-mode 1)
  ;; 
  ;;   ;; The modes above are optional
  ;;   (dap-ui-mode 1)
  ;;   ;; enables mouse hover support
  ;;   (dap-tooltip-mode 1)
  ;;   ;; use tooltips for mouse hover
  ;;   ;; if it is not enabled `dap-mode' will use the minibuffer.
  ;;   (tooltip-mode 1)
  ;;   ;; displays floating panel with debug buttons
  ;;   ;; requies emacs 26+
  ;;   (dap-ui-controls-mode 1)
  ;; )

#+END_SRC

* LSP Python3
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-python-ms
  ;;   :ensure t
  ;;   :init (setq lsp-python-ms-auto-install-server t)
  ;;   :hook (python-mode . (lambda ()
  ;;                           (require 'lsp-python-ms)
  ;;                           (lsp))))  ; or lsp-deferred
  ;; 
  ;;   (setq lsp-message-project-root-warning nil)
  ;;   (setq python-indent-offset 2)
  ;;   (setq python-indent-guess-indent-offset t)
  ;;   (setq python-indent-guess-indent-offset-verbose nil)

#+END_SRC

* LSP C++
#+BEGIN_SRC emacs-lisp
  ;(setq lsp-clangd-executable "clang")
  ;(setq lsp-clients-clangd-executable "clang")
#+END_SRC

* Language -> AHK
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
   (use-package ahk-mode))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
)
#+END_SRC

* AI
#+BEGIN_SRC emacs-lisp
;;tmp
;; (use-package company-tabnine
;;   :config
;;   (add-to-list 'company-backends #'company-tabnine)
;; )
#+END_SRC

* Workspaces
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :diminish eyebrowse-mode
  :config (progn
            ;; (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
            ;; (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
            ;; (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
            ;; (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
            (eyebrowse-mode t)
            ;; (setq eyebrowse-new-workspace t)
            (eyebrowse-setup-opinionated-keys)))

; https://github.com/mclear-tools/dotemacs/blob/master/setup-config/setup-projects.el

#+END_SRC

* EGLOT
#+BEGIN_SRC emacs-lisp

  ;; ;; (use-package flymake-eslint
  ;; ;; :config
  ;; ;;   (add-hook 'web-mode-hook (lambda () (flymake-eslint-enable)))
  ;; ;;   (add-hook 'js2-mode-hook (lambda () (flymake-eslint-enable)))
  ;; ;;   ;(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++2a")))
  ;; ;; )
  ;; 
  ;; (use-package eglot)
  ;; 
  ;; (add-to-list 'eglot-server-programs
  ;;               '((c++-mode c-mode "clangd")))
  ;; ;; (add-to-list 'eglot-server-programs
  ;; ;;               '(typescript-mode . ("javascript-typescript-stdio")))
  ;; 
  ;;  (add-hook 'c-mode-hook 'eglot-ensure)
  ;;  (add-hook 'c++-mode-hook 'eglot-ensure)
  ;;  (add-hook 'python-mode-hook 'eglot-ensure)
  ;;  (add-hook 'web-mode-hook 'eglot-ensure)
  ;;  (add-hook 'js-mode-hook 'eglot-ensure)
  ;;  (add-hook 'js2-mode-hook 'eglot-ensure)
  ;;  (add-hook 'js3-mode-hook 'eglot-ensure)
  ;;  (add-hook 'json-mode-hook 'eglot-ensure)
  ;;  (add-hook 'typescript-mode-hook 'eglot-ensure)
  ;;  (add-hook 'javascript-mode-hook 'eglot-ensure)
  ;; 
  ;;  
  ;; 
  ;; (use-package markdown-mode
  ;;   :mode (("README\\.md\\'" . gfm-mode)
  ;;          ("\\.md\\'" . markdown-mode)
  ;;          ("\\.markdown\\'" . markdown-mode))
  ;;   :init (setq markdown-command "multimarkdown")
  ;; )
#+END_SRC

* Test
#+BEGIN_SRC emacs-lisp
#+END_SRC

