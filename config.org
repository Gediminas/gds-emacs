* Init
#+BEGIN_SRC emacs-lisp

;; Advanced settings
(desktop-save-mode t)     ;auto save/load session,window-size

(setq-default truncate-lines t) ;do not wrap lines

(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)

;; Highlight current line
(global-hl-line-mode t)
#+END_SRC

* UI -> Controls
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
#+END_SRC

* UI -> MacOS: Fancy titlebar
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
#+END_SRC

* UI -> Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 1)
  (set-face-attribute 'mode-line nil :family "Arial Narrow" :height 70)
  (set-face-attribute 'mode-line-inactive nil :family "Arial Narrow" :height 70)
)
#+END_SRC

* UI -> Theme toggle
#+BEGIN_SRC emacs-lisp
(use-package theme-looper
 :ensure t
 :init
 :config
 (theme-looper-set-favorite-themes '(zenburn spacemacs-light))
 ;(theme-looper t)
)

  (global-set-key [f5] 'theme-looper-enable-next-theme)
#+END_SRC

* UI -> Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
;; Minimize mode-line
(use-package diminish
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 
    (lambda()
      (setq mode-name "")))  
  (with-eval-after-load 'undo-tree
    (diminish 'undo-tree-mode "")) 
  (diminish 'eldoc-mode "")
  )

;; Vim mode
(use-package evil
  :ensure t
  :config
  (evil-mode t)
)

;; Which Key
(use-package which-key
  :ensure t
  :init
  (which-key-mode t)
  :config
  (which-key-setup-side-window-bottom)
  (setq
    which-key-sort-order 'which-key-key-order-alpha
    which-key-side-window-max-width 0.33
    which-key-idle-delay 0.05
    which-key-separator " "
    which-key-prefix-prefix "+")
  :diminish (which-key-mode . ""))

;; Ivy
(use-package ivy
  :ensure t
  :config
  (ivy-mode t)
  (setq 
    ivy-use-virtual-buffers t ; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’
    ivy-height 10             ; number of result lines to display
    ivy-count-format "%d/%d " ; count candidates
    ivy-initial-inputs-alist nil ; no regexp by default
    ivy-re-builders-alist     ; configure regexp engine.
        '((t   . ivy--regex-ignore-order));; allow input not in order
   ) 
  :diminish (ivy-mode . ""))

(use-package counsel
  :ensure t
  :config
  (counsel-mode t)
  :diminish (counsel-mode . "")
)

;; Ranger (test)
(use-package ranger
  :ensure t
  :commands (ranger)
  :bind (("C-x d" . deer))
  :config
  (setq ranger-cleanup-eagerly t) ; kill the buffer just after you move to another entry in the dired buffer.
  )

;(use-package avy :ensure t
;  :commands (avy-goto-word-1))

#+END_SRC

* A la sane defaults
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )    ; delete excess backup versions silently
(setq version-control t )   ; use version control
;(setq vc-make-backup-files t )    ; make backups file even when in version controlled dir
;(setq backup-directory-alist `(("." . "~/.emacs.local/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )               ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.local/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )  ; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )  ; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 ) ; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)  ; sentence SHOULD end with only a point.
(setq default-fill-column 80)   ; toggle wrapping text at the 80th character
(setq initial-scratch-message
 "Emacs
0123456789 0Oo 1Il jgae
C-h m / SPC h m / minor-modes") ; print a default message in the empty scratch buffer opened at startup
#+END_SRC

(setq make-backup-files nil)

* Desktop auto-save/load (session,window-size)
#+BEGIN_SRC emacs-lisp
(desktop-save-mode t)
#+END_SRC

* Buffer auto-refresh
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t) ;(e.g. dired)
#+END_SRC

* Copy/Paste clipboard emacs-lisp
(setq select-enable-primary t)
(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
;; https://www.reddit.com/r/emacs/comments/5n9t3f/copypaste_from_system_clipboard_on_windows/
#+END_SRC

* Terminal (fails)
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
 :ensure t
 :init
 (setq projectile-require-project-root nil) ;any folder as prj
 :config
 (if (eq system-type 'darwin)
   (setq projectile-project-search-path '("~/dev/repo"))
   (setq projectile-project-search-path '("d:/dev/repo"))
 )
 (projectile-mode t))

(use-package counsel-projectile
 :ensure t
 :init
 :config
 (counsel-projectile-mode t))
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
(use-package magit)
(use-package evil-magit)
(use-package git-timemachine)
(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
(setq projectile-switch-project-action 'magit-status) ;;?
#+END_SRC

* Commenting
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter)
#+END_SRC

* Keys -> Misc
#+BEGIN_SRC emacs-lisp
;(global-set-key (kbd "<C-tab>") 'next-buffer)
#+END_SRC

* Keys -> Windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-tab>") 'other-window)

(with-eval-after-load 'org
  (define-key org-mode-map [(control tab)] nil))

(use-package winum
  :ensure t
  :config
  (setq window-numbering-scope            'local
        winum-reverse-frame-list          nil
        winum-auto-assign-0-to-minibuffer t
        ;winum-assign-func                 'my-winum-assign-func
        winum-auto-setup-mode-line        t
        ;winum-format                      " %s "
        winum-mode-line-position          1
        winum-ignored-buffers             '(" *which-key*")
        winum-ignored-buffers-regexp      '(" \\*Treemacs-.*"))
  (winum-mode t)
)
#+END_SRC

* Keys -> MacOS
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'control)
#+END_SRC

* Keys -> SPC leader
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t)

  (general-define-key
   :keymaps '(normal)
   :prefix "SPC"
   "SPC"  'counsel-M-x
   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
   "b"  '(:ignore t :which-key "buffer")
   "bb" 'ivy-switch-buffer
   "bd" 'kill-current-buffer
   "br" 'revert-buffer
   "bs" 'save-buffer
   "c"  '(:ignore t :which-key "code")
   "cx" '(flycheck-list-errors :which-key "previous buffer")
   "f"  '(:ignore t :which-key "file")
   "ff" 'counsel-projectile-find-file
   ;"fF" 'find-file-under-here
   "fd" 'deer
   "fr" 'counsel-recentf
   "g"  '(:ignore t :which-key "git")
   "gg" '(magit-status      :which-key "Git status")
   "gl" '(magit-file-log    :which-key "Git log")
   "gt" '(git-timemachine   :which-key "Git time-machine")
   "h"  '(:ignore t :which-key "help")
   "hm" 'describe-mode
   "p"  '(:ignore t :which-key "project")
   "pd" 'counsel-projectile-find-dir
   "pp" 'counsel-projectile-switch-project
   "pf" 'counsel-projectile-find-file
   "pg" 'counsel-projectile-grep
   "q"  '(:ignore t :which-key "quit")
   "qq" 'save-buffers-kill-terminal
   "s"  '(:ignore t :which-key "search")
   "ss" 'swiper-isearch
   "sS" 'swiper-isearch-thing-at-point
   "*"  'swiper-isearch-thing-at-point
   "t"  '(:ignore t :which-key "tweak/toggle/theme")
   "tw" 'toggle-truncate-lines
   "tl" 'display-line-numbers-mode
   "tf" 'flycheck-mode
   ;; "tt"  '(:ignore t :which-key "tweak")
   ;; "ttt" 'counsel-load-theme
   "tt" '(theme-looper-enable-next-theme :which-key "Theme toggle")
   "tl" '(counsel-load-theme             :which-key "Theme list")
   "w"  '(:ignore t :which-key "window")
   "wd" 'evil-window-delete
   "wr" 'evil-window-rotate-upwards
   "wR" 'evil-window-rotate-downwards
   "ww" 'evil-next-window
   "w/" 'split-window-right
   "w-" 'split-window-below
   "x"  '(:ignore t :which-key "x-files")
   "xeb" 'eval-buffer
   "xee" 'eval-last-sexp
   "xt" 'ansi-term

   "TT" 'treemacs
   "TB" 'treemacs-bookmark
   "TF" 'treemacs-find-file
   "TG" 'treemacs-find-tag
   "TD" 'treemacs-delete-other-windows

   ;; ";i" 'evilnc-comment-or-uncomment-lines
   ;; ";l" 'evilnc-quick-comment-or-uncomment-to-the-line
   ;; ";l" 'evilnc-quick-comment-or-uncomment-to-the-line
   ;; ";c" 'evilnc-copy-and-comment-lines
   ;; ";p" 'evilnc-comment-or-uncomment-paragraphs
   ;; ";r" 'comment-or-uncomment-region
   ;; ";v" 'evilnc-toggle-invert-comment-line-by-line
   ;; "."  'evilnc-copy-and-comment-operator
    ";" 'evilnc-comment-operator

   "0"  'treemacs-select-window
   "1"  'winum-select-window-1
   "2"  'winum-select-window-2
   "3"  'winum-select-window-3
   "4"  'winum-select-window-4
   "5"  'winum-select-window-5
   "6"  'winum-select-window-6
   "7"  'winum-select-window-7
   "8"  'winum-select-window-8
   "9"  'winum-select-window-9

   "t1" 'evil-snipe-s 

  ;  ;"a" 'align-regexp
  ;  ;"ar" '(ranger :which-key "call ranger")
  ;  ;"g"  '(:ignore t :which-key "Git")
  ;  ;"gs" '(magit-status :which-key "git status")
; ;; bind to simple key press
;  "b"	'ivy-switch-buffer  ; change buffer, chose using ivy
;  "/"   'counsel-git-grep   ; find string in git project
;  ;; bind to double key press
;  "f"   '(:ignore t :which-key "files")
;  "p"   '(:ignore t :which-key "project")
;  "pf"  '(counsel-git :which-key "find file in git dir")
;   ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
;   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
;   "SPC" '(helm-M-x :which-key "M-x")
;   "pf"  '(helm-find-file :which-key "find files")
;   ;; Buffers
;   "bb"  '(helm-buffers-list :which-key "buffers list")
;   ;; Window
;   "wl"  '(windmove-right :which-key "move right")
;   "wh"  '(windmove-left :which-key "move left")
;   "wk"  '(windmove-up :which-key "move up")
;   "wj"  '(windmove-down :which-key "move bottom")
;   "w/"  '(split-window-right :which-key "split right")
;   "w-"  '(split-window-below :which-key "split bottom")
;   "wx"  '(delete-window :which-key "delete window")
;   ;; Others
;   "at"  '(ansi-term :which-key "open terminal")
   )

  (general-define-key
   :keymaps '(normal insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"
   "/" 'swiper
  ;  ;"l" '(avy-goto-line)
  ;  "a" 'align-regexp
   )

;  (general-define-key
;  "C-'" 'avy-goto-word-1
;  ;"C-s" 'swiper             ; search for string in current buffer
;  ;"M-x" 'counsel-M-x        ; replace default M-x with ivy backend
;  )

  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

  (general-define-key
    :keymaps 'flycheck-mode-map
    "C-n" 'flycheck-next-error
    "C-p" 'flycheck-previous-error
  )

  (define-key org-mode-map [(control tab)] nil)
)
#+END_SRC

* Keys -> Escape
#+BEGIN_SRC emacs-lisp
;;; esc quits
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

* Javasript
  https://justin.abrah.ms/dotfiles/emacs.html
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode ("\\.js" . js2-mode)
  ;:init
  ;(setq js2-global-externs '("it" "afterEach" "beforeEach" "before" "after" "describe" "require" "module"))

  ;; Turn off js2 mode errors & warnings (we lean on eslint/standard)
  :config
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)
  (setq-default js2-basic-offset 2)
  (setq js-indent-level 2)
  ;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
  ;(add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  )

(use-package json-mode
  :mode ("\\.json" . json-mode))
#+END_SRC

* Syntax check
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  ;:commands
  ;flycheck-list-errors flycheck-buffer
  :config 
  (setq flycheck-display-errors-delay 0.25)
  (global-flycheck-mode t)
)
#+END_SRC

* UI -> Font Auto Zoom
#+BEGIN_SRC emacs-lisp
;; https://emacs.stackexchange.com/questions/28390/quickly-adjusting-text-to-dpi-changes
(defun my-dpi (&optional frame)
  "Get the DPI of FRAME (or current if nil)."
  (cl-flet ((pyth (lambda (w h)
                    (sqrt (+ (* w w)
                             (* h h)))))
            (mm2in (lambda (mm)
                     (/ mm 25.4))))
    (let* ((atts (frame-monitor-attributes frame))
           (pix-w (cl-fourth (assoc 'geometry atts)))
           (pix-h (cl-fifth (assoc 'geometry atts)))
           (pix-d (pyth pix-w pix-h))
           (mm-w (cl-second (assoc 'mm-size atts)))
           (mm-h (cl-third (assoc 'mm-size atts)))
           (mm-d (pyth mm-w mm-h)))
      (/ pix-d (mm2in mm-d)))))

(defvar my-zoom-frm-wanted-dpi 70
  "The DPI I want to achieve when using `my-zoom-frm-by-dpi'.")

(defun my-zoom-frm-by-dpi (&optional frame)
  "Zoom FRAME so the DPI is closer to `my-zoom-frm-wanted-dpi'."
  (interactive)
  (let ((frame (or frame (selected-frame))))
    (when (frame-parameter frame 'zoomed)
      (zoom-frm-unzoom frame))
    (let ((frame-zoom-font-difference (1- (round (/ (my-dpi frame)
                                                    my-zoom-frm-wanted-dpi)))))
      (when (called-interactively-p 'interactive)
        (message "Zooming by %S" frame-zoom-font-difference))
      (zoom-frm-in frame))))

;; Apply the scaling I want to each newly created frame:
(add-hook 'after-make-frame-functions #'my-zoom-frm-by-dpi)
#+END_SRC
