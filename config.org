* Init
#+BEGIN_SRC emacs-lisp
;; Package configs
(require 'package)
(setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package) ; unless it is already installed
  (package-refresh-contents) ; updage packages archive
  (package-install 'use-package)) ; and install the most recent version of use-package
(require 'use-package) ; guess what this one does too ?

#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme :ensure t :config (load-theme 'zenburn t))
(use-package doom-themes :ensure t)
(use-package spacemacs-common :ensure spacemacs-theme)
#+END_SRC

* Advanced
** Sane defaults
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )    ; delete excess backup versions silently
(setq version-control t )   ; use version control
(setq vc-make-backup-files t )    ; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.local/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )               ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.local/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )  ; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )  ; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 ) ; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)  ; sentence SHOULD end with only a point.
(setq default-fill-column 80)   ; toggle wrapping text at the 80th character
(setq initial-scratch-message
 "Emacs
0123456789 0Oo 1Il jgae
C-h m / SPC h m / minor-modes") ; print a default message in the empty scratch buffer opened at startup
#+END_SRC

* Automation
** Desktop auto-save/load (session,window-size)
#+BEGIN_SRC emacs-lisp
(desktop-save-mode t)
#+END_SRC

** Buffer auto-refresh
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t) ;(e.g. dired)
#+END_SRC

* Navigation
** Windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-tab>") 'other-window)

(with-eval-after-load 'org
  (define-key org-mode-map [(control tab)] nil))
#+END_SRC

* Copy/Paste clipboard
#+BEGIN_SRC emacs-lisp
(setq select-enable-primary t)
(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
;; https://www.reddit.com/r/emacs/comments/5n9t3f/copypaste_from_system_clipboard_on_windows/
#+END_SRC

* Keys
#+BEGIN_SRC emacs-lisp
#+END_SRC
